{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2019-07-15T12:57:03.043Z",
    "end": "2019-07-15T12:57:07.792Z",
    "duration": 4749,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6586b470-4c2e-42d9-b40f-b2921c18b1fe",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6f404786-54c2-4248-b6f5-80ecd593dccb",
        "title": "Test LambdaTest Website XHR",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Perform login and verify response using XHR",
            "fullTitle": "Test LambdaTest Website XHR Perform login and verify response using XHR",
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Start the proxy servcer that will intercept XMLHttpRequests that cy.route() generates.\n// This server will forward the request on to the actual endpoint https://accounts.lambdatest.com/api/user ...\ncy.server(); // Use cy.route() to manage the behaviour of (XMLHttpRequests) network requests sent by cypress \n// Send a GET request to the team end point\ncy.route({\n  method: 'GET',\n  url: 'api/user/organization/team'\n}).as('team');\ncy.route({\n  method: 'GET',\n  url: 'api/user/organization/automation-test-summary'\n}).as('apiCheck');\ncy.LoginToLambdatest(); // Make assertions on the response using explicit assertions - Response code is OK, JSON body property values\ncy.get(\"@team\").then(function (xhrResponse) {\n  expect(xhrResponse.status).to.eq(200);\n  expect(xhrResponse.response.body.data[0]).to.have.property(\"name\");\n  expect(xhrResponse.response.body.data[0]).to.have.property(\"name\", \"Test User\");\n}); // Making assertions on the Response using implicit assertions\ncy.get(\"@apiCheck\").its(\"response.body\").should(\"have.property\", \"maxQueue\").and(\"eq\", 10);",
            "err": {
              "message": "Error: Uncaught TypeError: Cannot read property 'style' of null (https://accounts.lambdatest.com/login:126)",
              "estack": "Error: Uncaught TypeError: Cannot read property 'style' of null (https://accounts.lambdatest.com/login:126)\n    at global.onerror (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:48193:10)"
            },
            "isRoot": false,
            "uuid": "1b781a8f-7f61-4cdf-812c-3e59ddbca422",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Verify cookies",
            "fullTitle": "Test LambdaTest Website XHR Verify cookies",
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "cy.LoginToLambdatest();\ncy.getCookie(\"user_id\").should(\"have.property\", \"value\", \"80099\");",
            "err": {},
            "isRoot": false,
            "uuid": "aee59183-ef50-402f-95c1-3f7673a4b8d2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "aee59183-ef50-402f-95c1-3f7673a4b8d2"
        ],
        "failures": [
          "1b781a8f-7f61-4cdf-812c-3e59ddbca422"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}